<agent xmlns="http://jadex.sourceforge.net/jadex" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
						http://jadex.sourceforge.net/jadex-0.96.xsd"
	name="Mindstorms1" package="org.vu.aso.next.pc.agentcontroller">

	<imports>
		<import>java.util.logging.*</import>
		<import>java.util.*</import>
		<import>jadex.adapter.fipa.SFipa</import>
		<import>jadex.adapter.fipa.*</import>
		<import>jadex.util.*</import>
		<import>org.vu.aso.next.pc.*</import>
		<import>org.vu.aso.next.common.*</import>
	</imports>

	<beliefs>
		<belief name="robot" class="NxtBridge" />
		<belief name="robotName" class="String" />
		<belief name="Initialized" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="clusterDetected" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="WIMRunning" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="readyForCommand" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="drivingBackward" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="drivingForward" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="turning" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="searching" class="boolean">
			<fact>true</fact>
		</belief>
		<belief name="collecting" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="depositAtWall" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="areaScanned" class="boolean">
			<fact>false</fact>
		</belief>

		<belief name="objectInGripper" class="EObjectType">
			<fact>EObjectType.NO_OBJECT</fact>
		</belief>

		<belief name="scanningArea" class="boolean">
			<fact>false</fact>
		</belief>
		<belief name="topSonarDistance" class="int">
			<fact>255</fact>
		</belief>
		<belief name="oldTopSonarDistance" class="int">
			<fact>255</fact>
		</belief>
		<belief name="distanceTraveled" class="int">
			<fact>0</fact>
		</belief>
		<belief name="closestBlockDistance" class="int">
			<fact>0</fact>
		</belief>
		<belief name="distanceBlockAngle" class="int">
			<fact>0</fact>
		</belief>
	</beliefs>

	<plans>
		<plan name="start_robot">
			<body>new InitPlan("JOEY")</body>
			<trigger>
				<condition>!$beliefbase.Initialized</condition>
			</trigger>
		</plan>
		<plan name="startWorldUpdatePlan">
			<body> new WorldBeliefUpdatePlan()</body>
			<trigger>
				<condition>$beliefbase.Initialized</condition>
			</trigger>
		</plan>

		<!-- General Rules -->
		<!-- Rule 1: Drive forward -->
		<plan name="actionDrive" priority="-1">
			<body>new DriveForwardPlan(10000)</body>
			<trigger>
				<condition>$beliefbase.readyForCommand</condition>
			</trigger>
			<precondition>
				$beliefbase.readyForCommand &amp;&amp;
				!$beliefbase.drivingBackward &amp;&amp;
				!$beliefbase.turning &amp;&amp;
				!$beliefbase.drivingForward
			</precondition>
		</plan>

		<!-- Rule 2: Avoid walls and other large obstacles -->
		<plan name="actionAvoidObstacles">
			<body> new AvoidObstaclePlan()</body>
			<trigger>
				<condition>
					$beliefbase.topSonarDistance &lt; 25
				</condition>
			</trigger>
			<precondition>
				$beliefbase.readyForCommand &amp;&amp;
				$beliefbase.topSonarDistance &lt; 25 &amp;&amp;
				!$beliefbase.turning &amp;&amp;
				!$beliefbase.depositAtWall
			</precondition>


		</plan>

		<!--
			Rule 3: Leave clusters intact dropping any blocks currently held
		-->
		<plan name="dropBlockPlan">
			<body>new DropBlockPlan()</body>
			<trigger>
				<condition>
					$beliefbase.clusterDetected
				</condition>
			</trigger>
			<precondition>
				$beliefbase.clusterDetected &amp;&amp;
				!$beliefbase.depositAtWall &amp;&amp;
				$beliefbase.readyForCommand
			</precondition>
		</plan>
		
		<!-- Rule 4: Light object detected -->
		<plan name="lightObjectPlan">
			<body>new LightObjectDetectedPlan()</body>
			<trigger>
				<condition>
					$beliefbase.objectInGripper == EObjectType.LIGHT_OBJECT
				</condition>
			</trigger>
			<precondition>
				$beliefbase.collecting &amp;&amp;
				$beliefbase.readyForCommand
			</precondition>
		</plan>
		
		<!-- Rule 5: Dark object detected -->
		<plan name="darkObjectPlan">
			<body>new DarkObjectDetectedPlan()</body>
			<trigger>
				<condition>
					$beliefbase.objectInGripper == EObjectType.DARK_OBJECT
				</condition>
			</trigger>
			<precondition>
				$beliefbase.collecting &amp;&amp;
				$beliefbase.readyForCommand
			</precondition>
		</plan>

		
		<!-- Rules while searching -->
		<!-- Rule 6: Scan the area -->
		<plan name="scanPlan">
			<body>new ScanPlan()</body>
			<trigger>
				<condition>
					!$beliefbase.areaScanned &amp;&amp;
					$beliefbase.searching
				</condition>
			</trigger>
			<precondition>
				$beliefbase.searching &amp;&amp;
				!$beliefbase.areaScanned &amp;&amp;
				$beliefbase.readyForCommand
			</precondition>
		</plan>

		<!-- Rule 8: Reset area scanned -->
		<plan name="resetScanPlan">
			<body>new ResetScanPlan()</body>
			<trigger>
				<condition>
					$beliefbase.distanceTraveled &gt; 30
				</condition>
			</trigger>
			<precondition>
				$beliefbase.readyForCommand
			</precondition>
		</plan>

		<plan name="ProcessObjectChangedPlan">
			<body>new ProcessObjectChangedPlan()</body>
			<trigger>
				<beliefchange ref="objectInGripper" />
			</trigger>
		</plan>
	</plans>

	<configurations>
		<configuration name="default">
		</configuration>
	</configurations>

</agent>